---
const { title, imgSrc, desc, url, badge, tags, pub_date, target = '_self' } = Astro.props

if (typeof tags !== 'undefined') var tagsarr = tags.slice(1, 4)
else tagsarr = new Array()

// import the Image component and the image
import { Image } from 'astro:assets'
import type { ImageMetadata } from "astro"
import.meta.glob<{ default: ImageMetadata }>
//import logoSrc from '../assets/img/astro.svg'

const images = import.meta.glob('../assets/img/*.svg')

for (const path in images) {
  images[path]().then((mod) => {
    console.log(path, mod)
  })
}
const imageSrc = await images[imgSrc]();

console.log(imgSrc)
---

<div
  class="card relative w-[100%] rounded-lg border border-gray-200 bg-slate-600 from-slate-400 to-slate-600 p-6 pt-3 shadow transition ease-in-out hover:scale-[101%] hover:bg-gradient-to-r hover:shadow-2xl dark:border-gray-700 dark:bg-gray-800 h-[100%]"
>
  <p class="float-right text-xs text-gray-400 hover:text-slate-800">Published: {pub_date}</p>
  
  <a href={url}>
    <h5 class="m-2 font-semibold tracking-tight text-gray-300 dark:text-white">{title}</h5>

    {
      badge && (
        <span class="float-right inline-flex items-center rounded-md bg-indigo-300 px-2 py-1 text-xs font-medium text-indigo-700 ring-1 ring-inset ring-indigo-700/10">
          {badge}
        </span>
      )
    }

    <Image src={imgSrc} alt={title} />

    <p class="mb-3 pb-3 font-normal text-slate-500 dark:text-gray-100">{desc}</p>

    <div class="absolute inset-x-0 bottom-1 mt-2 flex justify-center">
      {
        tagsarr.map((tag) => (
          <>
            <span class="bottom-0 mx-2 my-2 inline-flex items-center rounded-md bg-slate-500 px-2 py-1 text-xs text-slate-700 ring-1 ring-inset ring-indigo-700/10">
              {tag}
            </span>
          </>
        ))
      }
    </div>
  </a>
</div>

<style>
  .card {
    --base: 1.35; /* Handy multiplier for consistency across elements */
    --background: rgb(71 85 105 / var(--tw-bg-opacity));
  }

  .card:is(:hover, :focus-within) {
    background-position: 0;
    //background-image: linear-gradient(var(--gray-gradient)) no-repeat;
    /* background-image: linear-gradient(
      180deg, rgb(200,200,200),rgb(150,150,150) 10%,rgb(96, 93, 93) 40%); */
  }

  .card:is(:hover, :focus-within) h2 {
    color: rgb(var(--accent-lght));
  }

  /* Default heading styles for the card title */
  .card h5 {
    font-size: 1rem;
    border-bottom: 1px solid currentColor;
    text-underline-offset: 0.75em;
  }

  @container (max-width: 500px) {
    .card h5 {
      font-size: 0.7rem;
    }
  }
</style>
